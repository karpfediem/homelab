{{- range $index, $credential := .Values.credentials }}
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ $credential.secret }}-repo-creds
  namespace: argocd
  labels:
    argocd.argoproj.io/secret-type: repo-creds
    app.kubernetes.io/part-of: argocd
spec:
  data:
    - remoteRef:
        conversionStrategy: Default
        key: /gitops/ssh/{{ $credential.secret }}
        property: private_key
      secretKey: private_key
  refreshInterval: 1h
  secretStoreRef:
    kind: ClusterSecretStore
    name: vault
  target:
    creationPolicy: Owner
    deletionPolicy: Retain
    template:
      metadata:
        labels:
          argocd.argoproj.io/secret-type: repo-creds
          app.kubernetes.io/part-of: argocd
      data:
        type: {{ default "git" $credential.type }}
        name: {{ $credential.secret }}
        url: {{ $credential.url }}
        sshPrivateKey: >-
         {{ printf "{{ .private_key }}" }}
      engineVersion: v2
{{- end }}
{{- range $index, $project := .Values.projects }}
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ $project.name }}-repo
  namespace: argocd
  labels:
    argocd.argoproj.io/secret-type: repository
    app.kubernetes.io/part-of: argocd
spec:
  data:
    - remoteRef:
        conversionStrategy: Default
        key: /gitops/ssh/{{ default "argo-deploy-key" $project.repo.secret }}
        property: private_key
      secretKey: private_key
  refreshInterval: 1h
  secretStoreRef:
    kind: ClusterSecretStore
    name: vault
  target:
    creationPolicy: Owner
    deletionPolicy: Retain
    template:
      metadata:
        labels:
          argocd.argoproj.io/secret-type: repository
          app.kubernetes.io/part-of: argocd
      data:
        type: {{ default "git" $project.type }}
        name: {{ $project.name }}
        project: {{ $project.name }}
        url: {{ $project.repo.url }}
        sshPrivateKey: >-
         {{ printf "{{ .private_key }}" }}
      engineVersion: v2
---
apiVersion: argoproj.io/v1alpha1
kind: AppProject
metadata:
  name: {{ $project.name }}
  namespace: argocd
  # Finalizer that ensures that project is not deleted until it is not referenced by any application
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  # Project description
  description: {{ $project.description }}
  # Allow manifests to deploy from any repo
  sourceRepos:
    - "*"
    # Only permit applications to deploy to the argocd and their own namespace and suffixed variants in the same cluster
  destinations:
    - namespace: argocd
      server: https://kubernetes.default.svc
    - namespace: {{ regexReplaceAll "\\W+" $project.name "-" }}
      server: https://kubernetes.default.svc
    - namespace: '*-{{ regexReplaceAll "\\W+" $project.name "-" }}'
      server: https://kubernetes.default.svc

  # Deny all cluster-scoped resources from being created, except for Namespace and custom whitelist per project
  clusterResourceWhitelist:
    - group: ''
      kind: Namespace
  {{- with ($project.clusterResourceWhitelist) }}
    {{- toYaml . | nindent 4 }}
  {{- end }}

  # Allow all namespaced-scoped resources to be created, except for ResourceQuota, LimitRange, NetworkPolicy
  namespaceResourceBlacklist:
    - group: ''
      kind: ResourceQuota
    - group: ''
      kind: LimitRange
    - group: ''
      kind: NetworkPolicy

  # Deny all namespaced-scoped resources from being created, except for Application and ApplicationSet
  #namespaceResourceWhitelist:
  #  - group: 'apps'
  #    kind: Application
  #  - group: 'apps'
  #    kind: ApplicationSet

  # Enables namespace orphaned resource monitoring.
  orphanedResources:
    warn: false

  roles:
    # A role which provides read-only access to all applications in the project
    - name: read-only
      description: Read-only privileges to the project
      policies:
        - p, proj:my-project:read-only, applications, get, {{ $project.name }}/*, allow
      groups:
        - {{ $project.name }}-oidc-group

    # A role which provides sync privileges to all applications in the project, e.g. to provide
    # sync privileges to a CI system
    - name: ci-role
      description: Sync privileges for all projects
      policies:
        - p, proj:my-project:ci-role, applications, sync, {{ $project.name }}/*, allow

      # NOTE: JWT tokens can only be generated by the API server and the token is not persisted
      # anywhere by Argo CD. It can be prematurely revoked by removing the entry from this list.
      #jwtTokens:
      #  - iat: 1535390316

{{- end }}
---
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: argo-apps-root
  namespace: argocd
spec:
  generators:
    - list:
        elements:
      {{- range $index, $project := .Values.projects }}
          - name: {{ $project.name }}
            url: {{ $project.repo.url }}
            revision: {{ default "HEAD" $project.repo.revision }}
            path: {{ default "apps" $project.repo.path }}
      {{- end }}
  template:
    metadata:
      name: {{ printf "'{{name}}-root'" }}
    spec:
      destination:
        name: in-cluster
        namespace: argocd
      project: {{ printf "'{{name}}'" }}
      source:
        repoURL: {{ printf "'{{url}}'" }}
        targetRevision: {{ printf "'{{revision}}'" }}
        path: {{ printf "'{{path}}'" }}
      syncPolicy:
        automated:
          prune: true
          selfHeal: true
        retry:
          limit: 10
          backoff:
            duration: 1m
            factor: 2
            maxDuration: 16m
        syncOptions:
          - CreateNamespace=true
          - ApplyOutOfSyncOnly=true
